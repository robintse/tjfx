/*
 * File: app/controller/CommonController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CommonController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {

        }
    },

    launch: function() {
        this.loadCensusFreezeStore();

    },

    loadCensusFreezeStore: function() {
        var me = this;

        var gridcont = me.getCensusFreezeCont().down('#censusfreeze');
        var gridurl = './data/censusmaine2000TREE.json';

        this.loadStore(me, gridcont, gridurl, 'Loading Census...');

    },

    loadStore: function(me, gridcont, gridurl, loadmask, loadStoreInPostProcess) {
        // Load TreeStore data from JSON file within Controller since doesn't seem to work from within Store itself.
        // NOTE:  autoload=true -and- dummy root initialization required in Store to work=>
        //     root: {children: []}
        // Also:  Regular stores in JSON file format seem to load from within Store without issue.

        if (loadmask) {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: loadmask
            });
        }

        var myRequest = Ext.Ajax.request({
            url: gridurl,
            method: 'GET',
            timeout: 10000,
            cache: false,
            dataType: 'json',
            reader:{
                type: 'json'
            },

            success: function(response) {
                var griddata = Ext.JSON.decode(response.responseText);

                var gridListItemId = gridcont.getListItemId();
                var gridlist = gridcont.down('#'+gridListItemId);
                var gridstore = gridlist.getStore();

                if (!loadStoreInPostProcess) {
                    gridstore.suspendEvents();      
                    gridstore.removeAll();
                    var gridloaded = gridstore.setData(griddata);  
                    // setRoot() not working for TreeStores => http://www.sencha.com/forum/showthread.php?242257
                    gridstore.resumeEvents();
                    if (loadmask) {Ext.Viewport.setMasked(false);}
                }            

                me.postLoadProcess(gridListItemId, gridcont, griddata); 

            },

            failure: function(response, opts) {
                if (loadmask) {Ext.Viewport.setMasked(false);}

                Ext.Msg.alert('Data not loaded: '+gridurl);     
            }
        });

    },

    postLoadProcess: function(gridListItemId, gridcont, griddata) {
        var refreshed, fldListArr = [], collapseLvl, gridlist, scroller, myFilt = {}, gridcontX;
        var isPhone = !Ext.isEmpty(Ext.os.is.Phone);  // needed since this function returns either undefined or true


        gridlist = gridcont.down('#'+gridListItemId);
        scroller = gridlist.getScrollable().getScroller();


        if (gridListItemId === 'censusfreezelist') {
            // Collapse nodes to defined level
            var depth = gridcont.getDefaultCollapseLevel();
            if (depth !== 99) {gridcont.doExpandDepth(depth);}

            this.loadColumnsCensusFreeze(gridcont, false); // also refreshes list

            gridcontX = this.getCensusFreezeCont().down('#censusfreezeX');
            gridcontX.doRefreshList(true);

        }


        else {
            refreshed = gridcont.doRefreshList(); 

        }
    },

    loadColumnsCensusFreeze: function(gridcont, noRefresh) {
        var colArr = [
        {
            header: "Total", 
            dataIndex: "TotalPopulation", 
            width: "100px", 
            renderer: "this.formatNumbers(values.TotalPopulation, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "Male", 
            dataIndex: "Male", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Male, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "Female", 
            dataIndex: "Female", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Female, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "<5yrs", 
            dataIndex: "Under5years", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Under5years, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "5-9", 
            dataIndex: "Age5to9", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age5to9, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "10-14", 
            dataIndex: "Age10to14", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age10to14, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "15-19", 
            dataIndex: "Age15to19", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age15to19, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "20-24", 
            dataIndex: "Age20to24", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age20to24, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "25-34", 
            dataIndex: "Age25to34", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age25to34, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "35-44", 
            dataIndex: "Age35to44", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age35to44, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "45-54", 
            dataIndex: "Age45to54", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age45to54, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "55-59", 
            dataIndex: "Age55to59", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age55to59, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "60-64", 
            dataIndex: "Age60to64", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age60to64, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "65-74", 
            dataIndex: "Age65to74", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age65to74, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "75-84", 
            dataIndex: "Age75to84", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age75to84, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "85+", 
            dataIndex: "Age85andOver", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age85andOver, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "Median", 
            dataIndex: "MedianAge", 
            width: "100px", 
            renderer: "this.formatNumbers(values.MedianAge, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "18+", 
            dataIndex: "Age18andOver", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age18andOver, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "18+ Male", 
            dataIndex: "Age18andOverMale", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age18andOverMale, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "18+ Fem", 
            dataIndex: "Age18andOverFemale", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age18andOverFemale, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "21+", 
            dataIndex: "Age21andOver", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age21andOver, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "62+", 
            dataIndex: "Age62andOver", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age62andOver, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "65+", 
            dataIndex: "Age65andOver", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age65andOver, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "65+ Male", 
            dataIndex: "Age65andOverMale", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age65andOverMale, 0)", 
            style: "text-align:  right;" 
        }, 
        {
            header: "65+ Fem", 
            dataIndex: "Age65andOverFemale", 
            width: "100px", 
            renderer: "this.formatNumbers(values.Age65andOverFemale, 0)", 
            style: "text-align:  center;" 
        }
        ];

        gridcont.setColumns(colArr);
        if (!noRefresh) {
            gridcont.doRefreshList(true);   // Don't change collapse levels when refreshing
        }    

    }

});